type Mutation {
    sendOtp (telephone: String!, checkExistCustomerPhone: Boolean): Boolean @resolver(class: "SM\\CustomerGraphQl\\Model\\Resolver\\SendOtp") @doc(description: "Send OTP to telephone, use checkExistCustomerPhone to only send to existing customer")
    verifyOtp (telephone: String!, verificationCode: String!, action: String): Boolean @resolver(class: "SM\\CustomerGraphQl\\Model\\Resolver\\VerifyOtp") @doc(description: "Verify OTP sent to telephone")
    createTransCustomer (input: TransCustomerInput!): CustomerOutput @resolver(class: "SM\\CustomerGraphQl\\Model\\Resolver\\CreateTransCustomer") @doc(description: "Create Trans Customer")
    loginByPhone (telephone: String!, password: String!): CustomerToken @resolver(class: "SM\\CustomerGraphQl\\Model\\Resolver\\LoginByPhone") @doc(description: "Generate customer token by telephone and password")
    createCustomerAddress(input: CustomerAddressInput!): CustomerAddress @resolver(class: "SM\\CustomerGraphQl\\Model\\Resolver\\CreateCustomerAddress") @doc(description: "Create customer address")
    updateCustomerAddress(id: Int!, input: CustomerAddressInput!): CustomerAddress @resolver(class: "SM\\CustomerGraphQl\\Model\\Resolver\\UpdateCustomerAddress") @doc(description: "Update customer address")
    resetPassword (telephone: String!, new_password: String!): ResetPasswordOutput @resolver(class: "SM\\CustomerGraphQl\\Model\\Resolver\\ResetPassword") @doc(description: "Reset password")
    uploadCustomerAvatar (imageContent: ImageContent!): Boolean @resolver(class: "SM\\CustomerGraphQl\\Model\\Resolver\\UploadCustomerAvatar") @doc(description: "Upload customer avatar")
    updateCustomer (input: CustomerInput!): CustomerOutput @resolver(class: "SM\\CustomerGraphQl\\Model\\Resolver\\UpdateCustomer") @doc(description:"Update the customer's personal information")
    updateCustomerEmailPhone (input: CustomerEmailPhoneInput!): CustomerOutput @resolver(class: "SM\\CustomerGraphQl\\Model\\Resolver\\UpdateCustomerEmailPhone") @doc(description:"Update the customer's email/phone, require OTP")
    changeCustomerPassword (currentPassword: String!, newPassword: String!): CustomerOutput @resolver(class: "SM\\CustomerGraphQl\\Model\\Resolver\\UpdateCustomerPassword") @doc(description:"Update the customer's email/phone, require OTP")
}

type Query {
    isEmailExist (email: String): Boolean @resolver(class: "SM\\CustomerGraphQl\\Model\\Resolver\\IsEmailExist") @doc(description: "Verify if email already exist")
    isPhoneExist (telephone: String): Boolean @resolver(class: "SM\\CustomerGraphQl\\Model\\Resolver\\IsPhoneExist") @doc(description: "Verify if telephone already exist")
}

input TransCustomerInput {
    fullname: String @doc(description: "The customer's full name")
    prefix: String @doc(description: "An honorific, such as Dr., Mr., or Mrs.")
    firstname: String @doc(description: "The customer's first name")
    middlename: String @doc(description: "The customer's middle name")
    lastname: String @doc(description: "The customer's family name")
    suffix: String @doc(description: "A value such as Sr., Jr., or III")
    email: String @doc(description: "The customer's email address. Required for customer creation")
    dob: String @doc(description: "Deprecated: Use `date_of_birth` instead")
    date_of_birth: String @doc(description: "The customer's date of birth")
    taxvat: String @doc(description: "The customer's Tax/VAT number (for corporate customers)")
    gender: Int @doc(description: "The customer's gender (Male - 1, Female - 2)")
    password: String @doc(description: "The customer's password")
    is_subscribed: Boolean @doc(description: "Indicates whether the customer is subscribed to the company's newsletter")
    telephone: String @doc(description: "The customer's phone number")
}

input CustomerInput {
    occupancy: String @doc(description: "The customer's occupancy")
    marital_status: Int @doc(description: "The customer's marital status")
    fullname: String @doc(description: "The customer's full name")
}

input CustomerEmailPhoneInput {
    email: String
    telephone: String
}

type Customer {
    profile_picture: String @doc(description: "The customer's profile picture url")
    occupancy: String @doc(description: "The customer's occupancy")
    marital_status: Int @doc(description: "The customer's marital status")
    telephone: String @doc(description: "The customer's telephone")
}

input CustomerAddressInput {
    address_tag: String,
    district: String,
    recipient_name: String
}

type CustomerAddress {
    address_tag: String,
    district: String,
    recipient_name: String
}

type ResetPasswordOutput {
    status: Int
    message: String
}

input ImageContent {
    base64_encoded_data: String!
    name: String!
    type: String!
}
